name: 🚀 Deploy Automático para Firebase

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout do código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📋 Instalar dependências
      run: |
        npm ci
        npm install -g firebase-tools

    - name: 🔍 Detectar mudanças
      id: changes
      run: |
        echo "files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | tr '\n' ' ')" >> $GITHUB_OUTPUT
        echo "commit_message=${{ github.event.head_commit.message }}" >> $GITHUB_OUTPUT

    - name: 🧪 Executar testes
      run: npm test
      continue-on-error: false

    - name: 🏗️ Build do projeto
      run: npm run build

    - name: 🔥 Deploy para Firebase Hosting
      if: contains(steps.changes.outputs.files, 'public/') || contains(steps.changes.outputs.files, 'dist/')
      run: |
        echo "Fazendo deploy do Hosting..."
        firebase deploy --only hosting --project $FIREBASE_PROJECT_ID --token ${{ secrets.FIREBASE_TOKEN }}

    - name: ⚡ Deploy Cloud Functions
      if: contains(steps.changes.outputs.files, 'functions/')
      run: |
        echo "Fazendo deploy das Functions..."
        cd functions
        npm ci
        cd ..
        firebase deploy --only functions --project $FIREBASE_PROJECT_ID --token ${{ secrets.FIREBASE_TOKEN }}

    - name: 📊 Atualizar Firestore
      if: contains(steps.changes.outputs.files, 'firestore/') || contains(steps.changes.outputs.files, 'rules/')
      run: |
        echo "Atualizando regras do Firestore..."
        firebase deploy --only firestore --project $FIREBASE_PROJECT_ID --token ${{ secrets.FIREBASE_TOKEN }}

    - name: 🔄 Atualizar Database
      if: contains(steps.changes.outputs.files, 'database/')
      run: |
        echo "Atualizando Realtime Database..."
        firebase deploy --only database --project $FIREBASE_PROJECT_ID --token ${{ secrets.FIREBASE_TOKEN }}

    - name: 📱 Notificar sucesso
      if: success()
      run: |
        echo "✅ Deploy realizado com sucesso!"
        echo "Commit: ${{ github.sha }}"
        echo "Mensagem: ${{ steps.changes.outputs.commit_message }}"
        echo "Arquivos alterados: ${{ steps.changes.outputs.files }}"

    - name: 🚨 Notificar erro
      if: failure()
      run: |
        echo "❌ Erro no deploy!"
        echo "Verificar logs para mais detalhes."

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: 🧹 Limpeza de cache
      run: |
        echo "Limpando cache e recursos temporários..."
